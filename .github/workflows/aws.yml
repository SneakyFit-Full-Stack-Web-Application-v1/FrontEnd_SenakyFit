name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sneaky-fit-frontend               # set this to your Amazon ECR repository name
  ECS_SERVICE_NAME: sneaky-fit-frontend-service              
  ECS_CLUSTER_NAME: sneaky-fit-frontend-cluster                    # set this to your Amazon ECS cluster name
  ECS_TASK_DEF_NAME: sneaky-fit-frontend-td       # set this to the path to your Amazon ECS task definition                                                                                       
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fetch ECS Task Definition
      run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEF_NAME \
            --query 'taskDefinition' \
            --output json > task-def.json
            sudo apt-get install jq
             # Correct the CPU and Memory values in the task definition JSON
             jq '.containerDefinitions[0].cpu = 256 | .containerDefinitions[0].memory = 512' task-def.json > corrected-task-def.json
             # Replace the original file with the corrected one
             mv corrected-task-def.json task-def.json

    - name: Print Task Definition Contents
      run: |
         cat task-def.json


    - name: Update ECS Task Definition
      id: update-task-def
      run: |
       # Read the task definition JSON and extract the correct CPU and Memory values
       task_def_json=$(cat task-def.json)
       cpu_value=$(echo "$task_def_json" | jq -r '.containerDefinitions[0].cpu')
       memory_value=$(echo "$task_def_json" | jq -r '.containerDefinitions[0].memory')

       # Register the task definition with extracted values
       task_def_arn=$(aws ecs register-task-definition \
       --family ${{ env.ECS_TASK_DEF_NAME }} \
       --container-definitions "$task_def_json" \
       --query 'taskDefinition.taskDefinitionArn' \
       --output text)
       echo "Task Definition ARN: $task_def_arn"
       echo "Extracted CPU Value: $cpu_value"
       echo "Extracted Memory Value: $memory_value"
       echo "::set-output name=task_def_arn::$task_def_arn"
       echo "::set-output name=cpu_value::$cpu_value"
       echo "::set-output name=memory_value::$memory_value"


          
    - name: Deploy to ECS Service
      run: |
          ecs_service_name=${{ env.ECS_SERVICE_NAME }}
          ecs_cluster_name=${{ env.ECS_CLUSTER_NAME }}
          task_def_arn=${{ steps.update-task-def.outputs.task_def_arn }}
          
          aws ecs update-service \
            --cluster $ecs_cluster_name \
            --service $ecs_service_name \
            --task-definition $task_def_arn
